#BlueJ class context
comment0.params=
comment0.target=ABB()
comment0.text=Constructor\ de\ un\ ABB\ vacio\ *
comment1.params=e
comment1.target=java.lang.Comparable\ sucesor(java.lang.Comparable)
comment10.params=
comment10.target=java.lang.Comparable\ eliminarMin()
comment10.text=\ Elimina\ el\ minimo\ del\ ABB\ \n\ @return\ Elemento\ minimo\ \ \n
comment11.params=x
comment11.target=java.lang.Comparable\ eliminar(java.lang.Comparable)
comment11.text=\ Elimina\ el\ nodo\ que\ contiene\ el\ dato\ x\ \n\ @param\ \ x\ \ \ dato\ a\ eliminar\n\ @return\ dato\ eliminado\n
comment12.params=
comment12.target=java.lang.Comparable[]\ inOrden()
comment12.text=\ Construye\ un\ array\ ordenado\ de\ forma\ creciente\ con\ todos\ los\ valores\ del\ ABB\n\ resultado\ del\ recorrido\ en\ InOrden\ del\ mismo\ \n\ @return\ \ \ E[],\ array\ con\ los\ valores\ del\ ABB\ segun\ el\ recorrido\ en\ InOrden\ \ \ \ \ \ \ \ \ \ \n
comment13.params=
comment13.target=boolean\ esVacio()
comment13.text=\n\ Devuelve\ true\ si\ el\ ABB\ esta\ vacio\n\ @return\ true\ si\ esta\ vacio,\ false\ en\ caso\ contrario\n
comment14.params=
comment14.target=int\ talla()
comment14.text=\n\ Devuelve\ el\ numero\ de\ elementos\ del\ ABB\n\ @return\ Talla\ del\ ABB\n
comment15.params=
comment15.target=java.lang.String\ toStringInOrden()
comment15.text=\n\ Recorrido\ inOrden\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ inOrden\n
comment16.params=
comment16.target=java.lang.String\ toStringPreOrden()
comment16.text=\n\ Recorrido\ en\ preOrden\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ preOrden\n
comment17.params=
comment17.target=java.lang.String\ toStringPostOrden()
comment17.text=\n\ Recorrido\ en\ postOrden\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ postOrden\n
comment18.params=
comment18.target=java.lang.String\ toStringPorNiveles()
comment18.text=\n\ Recorrido\ por\ niveles\ del\ ABB\n\ @return\ String\ con\ los\ elementos\ segun\ el\ recorrido\ por\ niveles\n
comment2.params=
comment2.target=int\ numHojas()
comment2.text=\ Devuelve\ el\ numero\ de\ hojas\ del\ ABB\n\ @return\ \ \ numero\ de\ hojas\ del\ ABB\n
comment3.params=
comment3.target=int\ altura()
comment3.text=\ Devuelve\ la\ altura\ del\ ABB\n\ @return\ \ \ Altura\ del\ ABB\n
comment4.params=
comment4.target=void\ reconstruirEquilibrado()
comment4.text=\ \n\ Reconstruye\ el\ ABB,\ con\ los\ mismos\ datos,\ de\ forma\ que\ quede\ equilibrado\ \ \ \ \ \ \ \ \n
comment5.params=vec\ ini\ fin
comment5.target=void\ reconstruirEquilibrado(java.lang.Comparable[],\ int,\ int)
comment6.params=x
comment6.target=void\ insertar(java.lang.Comparable)
comment6.text=\ Inserta\ un\ elemento\ dado\ x\ en\ el\ ABB\ sin\ permitir\ duplicados.\n\ No\ hace\ nada\ si\ el\ dato\ a\ buscar\ ya\ se\ encuentra\ en\ el\ ABB\n\ @param\ \ \ \ valor\ \ \ Elemento\ a\ insertar\ \n
comment7.params=x
comment7.target=java.lang.Comparable\ recuperar(java.lang.Comparable)
comment7.text=\ Busca\ el\ valor\ dado\ en\ el\ ABB\n\ @param\ \ \ \ x\ \ \ \ \ \ \ Elemento\ a\ buscar\n\ @return\ \ \ dato\ en\ el\ ABB\ que\ coincide\ con\ x,\ null\ si\ no\ hay\ ninguno\ \ \ \ \ \ \ \ \ \ \n
comment8.params=x
comment8.target=java.lang.Comparable\ actualizar(java.lang.Comparable)
comment8.text=\ Actualiza\ el\ dato\ x\ en\ el\ ABB,\ si\ no\ esta\ lo\ inserta\ \n\ @param\ \ \ \ x\ \ \ \ \ \ \ Elemento\ a\ insertar/actualizar\n\ @return\ \ \ dato\ anterior\ en\ el\ ABB\ que\ coincidia\ con\ x,\ null\ si\ no\ habia\ ninguno\ \ \ \ \ \ \ \ \ \ \n
comment9.params=
comment9.target=java.lang.Comparable\ recuperarMin()
comment9.text=\ Devuelve\ el\ elemento\ minimo\ del\ ABB\n\ @return\ Elemento\ minimo\ \ \n
numComments=19
